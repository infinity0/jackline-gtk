#!/usr/bin/python3
# See Makefile for dependencies.

import atexit
import os
import os.path
import queue
import threading
import time

import gi
gi.require_version('Gdk', '3.0')
gi.require_version('Gtk', '3.0')
from gi.repository import GLib, Gdk, Gtk
gi.require_version('Notify', '0.7')
from gi.repository import Notify
gi.require_version('Vte', '2.91')
from gi.repository import Vte

try:
    import pycanberra
except ImportError:
    # c+p minimal functionality that we need from https://github.com/psykoyiko/pycanberra/
    # yes this is hacky, bite my shiny metal a...
    import ctypes
    def pycanberra(): return
    pycanberra.CA_PROP_EVENT_ID = "event.id"
    class Canberra(object):
        def __init__(self):
            self._handle = ctypes.c_void_p()
            self._libhandle = ctypes.CDLL("libcanberra.so.0")
            self._libhandle.ca_context_create(ctypes.byref(self._handle))
        def destroy(self):
            res = self._libhandle.ca_context_destroy(self._handle)
            if res != 0:
                raise RuntimeError(res, "Failed to destroy context")
        def play(self, playId, *args):
            args = tuple(arg.encode("utf-8") if isinstance(arg, str) else arg for arg in args)
            res = self._libhandle.ca_context_play(self._handle, playId, *args)
            if res != 0:
                raise RuntimeError(res, "Failed to play!")
    pycanberra.Canberra = Canberra
    del Canberra

CONFIG_DIR = os.path.expanduser("~/.config/ocaml-xmpp-client/")
COMMAND = "jackline"
PROGNAME = "jackline-gtk"
PROGTITLE = "Jackline Messenger"
FIFO_IN = os.path.join(CONFIG_DIR, "jackline-gtk.fifo")
FIFO_OUT = os.path.join(CONFIG_DIR, "jackline.fifo")
ERREXITMSG0 = "jackline exited abnormally"
ERREXITMSG1 = "press enter to continue..."

def start_thread(target):
    thread = threading.Thread(target=target)
    thread.daemon = True
    thread.start()
    return thread

def serve_fifo(fn, m, serve_fp):
    while True:
        with open(fn, m) as fp:
            serve_fp(fp)
        # fifo closed; reopen

def for_lines_in_file(fp, handle_line):
    while True:
        line = fp.readline()
        if not line:
            break
        elif line[-1] != '\n':
            # yes python is this retarded, there is no "isEOF" method
            closed = True
        else:
            line = line[:-1]
            closed = False
        handle_line(line)

class UINotify(object):
    def __init__(self, window):
        super(UINotify, self).__init__()
        self._window = window
        self._icons = Gtk.IconTheme.get_default()
        self._mail_unread_icon = self._icons.load_icon("mail-unread", 48, 0)
        try:
            self._canberra = pycanberra.Canberra()
        except Exception:
            self._canberra = None

    def handle_line(self, line):
        state, event, args = (line + " ").split(" ", 2)
        has_notifications = "notification" in state
        GLib.idle_add(self._gtk_urgency, has_notifications)

        if "notify" in event:
            self.handle_notify()

    def handle_notify(self):
        n = Notify.Notification.new(PROGTITLE, "Message received")
        n.set_urgency(Notify.Urgency.NORMAL)
        n.set_category("im.received")
        if self._mail_unread_icon:
            n.set_icon_from_pixbuf(self._mail_unread_icon)
        GLib.idle_add(self._gtk_notify, n)

    # GTK stuff must be done via GLib.idle_add
    # see https://wiki.gnome.org/Projects/PyGObject/Threading

    def _gtk_urgency(self, urgency):
        self._window.set_urgency_hint(urgency)

    def _gtk_notify(self, n):
        n.show()
        try:
            self._canberra.play(0, pycanberra.CA_PROP_EVENT_ID, "message-new-instant", None)
        except Exception:
            pass # no sound will be played, oh well...

    def __enter__(self, *args):
        return self

    def __exit__(self, *args):
        self._canberra.destroy()

class UIFocus(object):

    def __init__(self):
        self._app_focus_q = queue.Queue()

    def serve_fp(self, fp):
        while True:
            line = self._app_focus_q.get()
            if not line: break
            fp.write("%s\n" % line.strip())
            fp.flush()
        fp.close()

    def cb_state(self, window, evt):
        if evt.new_window_state & Gdk.WindowState.FOCUSED:
            self._app_focus_q.put("gui_focus true")
        else:
            self._app_focus_q.put("gui_focus false")

# init
Gdk.threads_init()
Notify.init(PROGNAME)
v = Vte.Terminal()
window = Gtk.Window()
window.set_title(PROGTITLE)
windowicon = window.render_icon(Gtk.STOCK_UNDERLINE, Gtk.IconSize.LARGE_TOOLBAR)
window.set_icon(windowicon)

# set up notify hooks
os.mkfifo(FIFO_IN); atexit.register(os.remove, FIFO_IN)
def handle_incoming():
    with UINotify(window) as observer:
        serve_fifo(FIFO_IN, "r", lambda fp:
            for_lines_in_file(fp, lambda line:
                observer.handle_line(line)))
start_thread(handle_incoming)

# set up ui_focus hooks
ui_focus = UIFocus()
os.mkfifo(FIFO_OUT); atexit.register(os.remove, FIFO_OUT)
def handle_outgoing():
    serve_fifo(FIFO_OUT, "w", ui_focus.serve_fp)
start_thread(handle_outgoing)

def cb_quit(o, e):
    Gtk.main_quit()

# start jackline
v.connect("child-exited", cb_quit)
v.spawn_sync(
    Vte.PtyFlags.DEFAULT,
    os.getcwd(),
    ["/bin/sh", "-c",
     '%s -f \'%s\' 3<%s 4>%s "$@" || read -p "%s: $?; %s" x;' % (COMMAND, CONFIG_DIR, FIFO_OUT, FIFO_IN, ERREXITMSG0, ERREXITMSG1),
     COMMAND, '-f', CONFIG_DIR, "--fd-gui", "/dev/fd/3", "--fd-nfy", "/dev/fd/4"],
    ["%s=%s" % p for p in os.environ.items()],
    GLib.SpawnFlags.DEFAULT)
window.add(v)
window.connect("window-state-event", ui_focus.cb_state)
window.connect('delete-event', cb_quit)
window.maximize()
window.show_all()

# main loop
Gtk.main()
